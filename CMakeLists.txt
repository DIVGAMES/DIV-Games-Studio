# CMAKE lists file for DIV GAMES STUDIO
# (c) 2015 Mike Green  
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(div2015)

# setup some defaults
INCLUDE ( ${CMAKE_CURRENT_LIST_DIR}/tools/defaults.cmake )

IF(NOT WIN32) # Don't compile the project's in windows with MSYS2 (TOFIX)
exec_program(
    "git"
    ${CMAKE_CURRENT_SOURCE_DIR}
    ARGS "log -1 --format=%h"
    OUTPUT_VARIABLE VERSION )
ENDIF()

#string( REGEX MATCH "-g.*$" VERSION_SHA1 ${VERSION} )
#string( REGEX REPLACE "[-g]" "" VERSION_SHA1 ${VERSION_SHA1} )

add_definitions( -DGIT_SHA1="${VERSION}" )

SET(CLANG "C")

# Check which target we want
IF(NOT TARGETOS)
# autodetect windows / linux / osx
	IF(WIN32)
		SET(TARGETOS "WINDOWS")
	ELSE()
		IF(APPLE)
			SET(TARGETOS "OSX")
		ELSE()
			SET(TARGETOS "LINUX")
		ENDIF()
	ENDIF()
ENDIF()

IF(TARGETOS STREQUAL "WINDOWS")
	SET(BUILDEXT ".exe")
ELSE()
	SET(BUILDEXT "")
ENDIF()
MESSAGE(STATUS "SETTING BUILDEXT TO: ${BUILDEXT}")

# set TARGET to lower
STRING( TOLOWER ${TARGETOS} LTARGET )

IF(EXISTS ${CMAKE_CURRENT_LIST_DIR}/tools/${LTARGET}.cmake )
	INCLUDE ( ${CMAKE_CURRENT_LIST_DIR}/tools/${LTARGET}.cmake )
ELSE()
	MESSAGE(SEND_ERROR "Cannot find ${CMAKE_CURRENT_LIST_DIR}/${LTARGET}.cmake")
ENDIF()


IF(DEBUG)
	SET(BUILD_LEVEL "-ggdb3 -O0" )
ELSE()
	SET(BUILD_LEVEL " -O1 ")
ENDIF()

#Check for OS Dependant functions and fall back to linux osdep if not set

IF(NOT OSDEP)
	SET(OSDEP "src/shared/osdep.c")
ENDIF()

IF(HAS_DLL)
	SET(DLLSRC "src/shared/mikedll.c")
ENDIF()

SET(ZIP_SOURCES "src/shared/lib/zip/src/zip.c")

FILE(GLOB SHARED_RUN "src/shared/run/*.c")

SET(SHARED_RUN ${SHARED_RUN} "src/shared/unzip.c")

# The name of our binary
IF(NOT DEFINED TARGET)
	SET(TARGET "div") 
ENDIF()

IF(NOT DEFINED PLATFORM)
	MESSAGE(SEND_ERROR "PLATFORM not defined. is ${TARGETOS} correct?")
ENDIF()

SET(RUNTIME "divrun-${PLATFORM}")
SET(D1RUNTIME "div1run-${PLATFORM}")
SET(DEBUG "divdbg-${PLATFORM}")
SET(RUNNER "d-${PLATFORM}")


set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")
set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "")

INCLUDE(FindPkgConfig)

MESSAGE(STATUS "Adding Libraries")

MESSAGE(STATUS "CMAKE_FIND_ROOT_PATH: "  ${CMAKE_FIND_ROOT_PATH} )
MESSAGE(STATUS "CMAKE_SYSTEM_LIBRARY_PATH: "  ${CMAKE_SYSTEM_LIBRARY_PATH} )
MESSAGE(STATUS "CMAKE_INCLUDE_PATH: "  ${CMAKE_INCLUDE_PATH} )
MESSAGE(STATUS "CMAKE_SYSTEM_INCLUDE_PATH: "  ${CMAKE_SYSTEM_INCLUDE_PATH} )
# SETUP SDL ADDONS

IF(HAS_SDL EQUAL 1)
	MESSAGE(STATUS "Adding SDL Library")

	ADD_DEFINITIONS( -DSDL=${HAS_SDL})

	IF(WIN32)
	#MESSAGE(STATUS "/usr/${TOOLCHAIN_PREFIX}/include/SDL")
	set(SDL_INCLUDE_DIRS "/usr/${TOOLCHAIN_PREFIX}/include/SDL")
	include_directories("/usr/${TOOLCHAIN_PREFIX}/include/SDL")
	ELSE()
	Include(FindSDL)
	include_directories(${SDL_INCLUDE_DIR})
	set(EXTRA_LIBS ${EXTRA_LIBS} ${SDL_LIBRARY})
	ENDIF()
	
	IF(HAS_NET)
		MESSAGE(STATUS "Adding SDL NET")

		ADD_DEFINITIONS( -DNETPLAY )

		IF(WIN32)
		set(EXTRA_LIBS ${EXTRA_LIBS} SDL_net )
		ELSE()
		Include(FindSDL_net)
		set(EXTRA_LIBS ${EXTRA_LIBS} ${SDL_NET_LIBRARIES} )
		include_directories(${SDL_NET_INCLUDE_DIRS})
		ENDIF()
	ENDIF()
	
	IF(HAS_SDLMIXER)
		MESSAGE(STATUS "Adding SDL Mixer")

		ADD_DEFINITIONS( -DMIXER )

		IF(WIN32)
		PKG_SEARCH_MODULE(SDLMIXER REQUIRED SDL_mixer>=1.2.0)
		include_directories(${SDL_MIXER_INCLUDE_DIRS})
		set(EXTRA_LIBS ${EXTRA_LIBS} ${SDLMIXER_LIBRARIES} )
		ELSE()
		Include(FindSDL_mixer)
		include_directories(${SDL_MIXER_INCLUDE_DIRS})
		set(EXTRA_LIBS ${EXTRA_LIBS} ${SDL_MIXER_LIBRARIES} )
		ENDIF()
	ENDIF()

	IF(HAS_SDLIMAGE)
		MESSAGE(STATUS "Adding SDL Image")

		ADD_DEFINITIONS( -DIMAGE )

		IF(WIN32)
		PKG_SEARCH_MODULE(SDLIMAGE REQUIRED SDL_image>=1.2.0)
		include_directories(${SDLIMAGE_INCLUDE_DIRS})
		set(EXTRA_LIBS ${EXTRA_LIBS} ${SDLIMAGE_LIBRARIES})
		ELSE()
		Include(FindSDL_mixer)
		include_directories(${SDL_IMAGE_INCLUDE_DIRS})
		set(EXTRA_LIBS ${EXTRA_LIBS} ${SDL_IMAGE_LIBRARIES})
		ENDIF()
	ENDIF()

	IF(HAS_SDLTTF)
		MESSAGE(STATUS "Adding SDL TTF")

		IF(WIN32)
		ADD_DEFINITIONS( -DTTF )
		PKG_SEARCH_MODULE(SDLTTF REQUIRED SDL_ttf>=1.2.0)
		include_directories(${SDLTTF_INCLUDE_DIRS})
		set(EXTRA_LIBS ${EXTRA_LIBS} ${SDLTTF_LIBRARIES})
		ELSE()
		Include(FindSDL_mixer)
		include_directories(${SDL_TTF_INCLUDE_DIRS})
		set(EXTRA_LIBS ${EXTRA_LIBS} ${SDL_TTF_LIBRARIES})
		ENDIF()
	ENDIF()

	SET(OSDEP ${OSDEP} "src/shared/osdep/osd_sdl12.c")

ENDIF()

IF(HAS_SDL EQUAL 2)
	MESSAGE(STATUS "Adding SDL2 Library")

	ADD_DEFINITIONS( -DSDL2=${HAS_SDL})

	IF(WIN32)
	#MESSAGE(STATUS "/usr/${TOOLCHAIN_PREFIX}/include/SDL2")
	set(SDL2_INCLUDE_DIRS "/usr/${TOOLCHAIN_PREFIX}/include/SDL2")
	include_directories("/usr/${TOOLCHAIN_PREFIX}/include/SDL2")
	ELSE()
	FIND_PACKAGE(SDL2 REQUIRED sdl2) 
	include_directories(${SDL2_INCLUDE_DIRS})
	string(STRIP ${SDL2_LIBRARIES} SDL2_LIBRARIES)
	set(EXTRA_LIBS ${EXTRA_LIBS} ${SDL2_LIBRARIES})
	ENDIF()
	
	IF(HAS_NET)
		MESSAGE(STATUS "Adding SDL2 NET")

		ADD_DEFINITIONS( -DNETPLAY )

		IF(WIN32)
		set(EXTRA_LIBS ${EXTRA_LIBS} SDL2_net )
		ELSE()
		PKG_SEARCH_MODULE(SDLNET REQUIRED SDL2_net>=2.0.0)
		set(EXTRA_LIBS ${EXTRA_LIBS} "SDL2_net")
		include_directories(${SDL2_NET_INCLUDE_DIRS})
		ENDIF()
	ENDIF()
	
	IF(HAS_SDLMIXER)
		MESSAGE(STATUS "Adding SDL2 Mixer")

		ADD_DEFINITIONS( -DMIXER )

		PKG_SEARCH_MODULE(SDLMIXER REQUIRED SDL2_mixer>=2.0.0)
		include_directories(${SDLMIXER_INCLUDE_DIRS})
		set(EXTRA_LIBS ${EXTRA_LIBS} ${SDLMIXER_LIBRARIES} )
	ENDIF()

	IF(HAS_SDLIMAGE)
		MESSAGE(STATUS "Adding SDL2 Image")

		ADD_DEFINITIONS( -DIMAGE )

		PKG_SEARCH_MODULE(SDLIMAGE REQUIRED SDL_image>=2.0.0)
		include_directories(${SDLIMAGE_INCLUDE_DIRS})
		set(EXTRA_LIBS ${EXTRA_LIBS} ${SDLIMAGE_LIBRARIES})
	ENDIF()

	IF(HAS_SDLTTF)
		MESSAGE(STATUS "Adding SDL2 TTF")

		PKG_SEARCH_MODULE(SDLTTF REQUIRED SDL2_ttf>=2.0.0)
		include_directories(${SDLTTF_INCLUDE_DIRS})
		set(EXTRA_LIBS ${EXTRA_LIBS} ${SDLTTF_LIBRARIES})
	ENDIF()

	SET(OSDEP ${OSDEP} "src/shared/osdep/osd_sdl2.c")

ENDIF()


IF(HAS_JPEG)
	MESSAGE(STATUS "Adding LIBJPG")
	ADD_DEFINITIONS( -DJPGLIB )
	SET(EXTRA_LIBS ${EXTRA_LIBS} "jpeg" )
ENDIF()

IF(HAS_ZLIB)
#	find_package( ZLIB REQUIRED )

	include_directories( ${ZLIB_INCLUDE_DIRS} )

	MESSAGE(STATUS "Adding ZLIB")
#	include_directories(${ZLIB_INCLUDE_DIRS})
	set(EXTRA_LIBS ${EXTRA_LIBS} "z" )
	ADD_DEFINITIONS( -DZLIB )

ENDIF()


IF(HAS_GIT)
#	find_library(GIT2 libsomelib.a)
	include(FindPkgConfig)
	pkg_search_module(GIT2 REQUIRED libgit2>=0.17.0)
#	find_package( GIT2 REQUIRED) 
	add_definitions(${GIT2_CFLAGS})
	link_directories(${GIT2_LIBRARY_DIRS})
	include_directories(${GIT2_INCLUDE_DIRS})
	set(EXTRA_LIBS ${EXTRA_LIBS} ${GIT2_LIBRARIES})

	set(EXTRA_LIBS ${EXTRA_LIBS} "pthread" )

#	SET (OS_LINK_FLAGS ${OS_LINK_FLAGS} "${GIT2_LIBRARY_DIRS}/libgit2.a" )
	ADD_DEFINITIONS( -DDIVGIT )
ENDIF()
IF(HAS_FLI)
	ADD_DEFINITIONS( -DUSE_FLI) 
ENDIF()

IF ( HAS_NEWMODE8 ) 
##	MESSAGE(STATUS "Adding NEW MODE8 (portrender)")
##	FILE(GLOB VPE_SOURCES "src/shared/lib/portrend/*.c")
##	ADD_DEFINITIONS(-DNEWMODE8)
ENDIF()


IF ( HAS_MODE8 ) 
	MESSAGE(STATUS "Adding MODE8 (VPE)")
	FILE(GLOB VPE_SOURCES "src/runtime/vpe/*.c")
	INCLUDE_DIRECTORIES( "src/runtime/vpe" )
	ADD_DEFINITIONS(-DMODE8)
	IF ( HAS_PORTREND ) 
		MESSAGE(STATUS "Adding NEW MODE8 (portrender)")
		SET(VPE_SOURCES ${VPE_SOURCES} "src/shared/lib/portrend/portrend.c")
		INCLUDE_DIRECTORIES( "src/shared/lib/portrend" )

#		FILE(GLOB VPE_SOURCES "src/shared/lib/portrend/*.c")
		ADD_DEFINITIONS(-DPORTRENDER)
	ENDIF()

ENDIF()



IF(HAS_DLL)
	MESSAGE(STATUS "Adding DLL PLUGIN Support")
	ADD_DEFINITIONS(-DDIVDLL)
ENDIF()


ADD_DEFINITIONS (${OS_DEFINITIONS})

IF(HAS_SDL)

MESSAGE(STATUS "Using SDL-${HAS_SDL}")

ENDIF()

SET(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${OS_LINK_FLAGS} )

SET(PLATFORM_LIBS m ${OS_LIBS})

#SET(PLATFORM_LIBS "jpeg" "m" "z" "mingw32" "SDL" "SDLMain" "mingw32")

# include our SDL stuff
# this includes TTF
#IF(SDL GREATER 0)
#	MESSAGE("-- Including SDL(${SDL})")
#	SET(TARGET ${TARGET}-SDL${SDL})
#	INCLUDE (tools/sdl.cmake)
#ENDIF()

# default definitions
ADD_DEFINITIONS( -D_GNU_SOURCE)

INCLUDE_DIRECTORIES(src/shared src/)
SET(RUNNER_SOURCES "src/runner/r.c")
FILE(GLOB DIV_SOURCES "src/*.c")


FILE(GLOB SDLGFX_SOURCES "src/shared/lib/sdlgfx/SDL_framerate.c")

IF(HAS_SDL EQUAL 1) 
	SET(SDLGFX_SOURCES ${SDLGFX_SOURCES} "src/shared/lib/sdlgfx/SDL_rotozoom.c")
ENDIF()

SET(DIV_SOURCES ${DIV_SOURCES} ${SDLGFX_SOURCES} )

IF(HAS_TTF)
SET(DIV_SOURCES ${DIV_SOURCES} "src/shared/ttf.c")
ENDIF()

IF(HAS_DLL)
FILE(GLOB DLL_SOURCES "dll/*.c")
ENDIF()

FILE(GLOB VISOR_SOURCES "src/visor/*.c")
FILE(GLOB RUNTIME_SOURCES "src/runtime/*.c")
FILE(GLOB DEBUG_SOURCES "src/runtime/debug/*.c")
FILE(GLOB DIV1RUN_SOURCES "src/div1run/*.c")

#FILE(GLOB JUDAS_SOURCES "src/judas/*.c")
#SET(JUDAS_SOURCES "src/judas/judaswav.c" "src/judas/judas.c" ) 


#INCLUDE (tools/plugins.cmake)

#ADD_DEFINITIONS( -D${PLATFORM} -DMIXER )

SET(TARGET ${TARGET}-${PLATFORM} ) #-${GIT_BRANCH}-${GIT_COMMIT_HASH})

SET(DEMOTARGET ${TARGET}-DEMO ) #-${GIT_BRANCH}-${GIT_COMMIT_HASH})

# make this a c++ app
#IF(CPLUSPLUS) 
SET_SOURCE_FILES_PROPERTIES(${SDLGFX_SOURCES} ${SHARED_RUN} $(DLL_SOURCES) ${DLLSRC} ${RUNNER_SOURCES} ${VPE_SOURCES} PROPERTIES LANGUAGE ${CLANG} )
SET_SOURCE_FILES_PROPERTIES(${RUNTIME_SOURCES} ${DIV1RUN_SOURCES} ${DEBUG_SOURCES} ${DIV_SOURCES} ${VISOR_SOURCES} ${JUDAS_SOURCES} ${OSDEP} PROPERTIES LANGUAGE ${CLANG})

#IF(NOT TARGETOS STREQUAL "PSP")
ADD_DEFINITIONS( ${BUILD_LEVEL} -fpermissive -fno-omit-frame-pointer -funsigned-char -w -Wno-unused-result -Wno-unused -D${PLATFORM}=1 -DTARGET="${TARGET}" -DRDEBUG="${DEBUG}" -DRUNTIME="${RUNTIME}")
#ELSE()
#	ADD_DEFINITIONS( -G0 ${BUILD_LEVEL} -D_PSP_FW_VERSION=150 -fno-exceptions -fno-rtti -fpermissive -funsigned-char -w -Wno-unused -DTARGET="${TARGET}" -DRDEBUG="${DEBUG}" -DRUNTIME="${RUNTIME}")
#ENDIF()
# -DJPGLIB)

#ADD_DEFINITIONS( -D_GNU_SOURCE=1 -DZLIB -DSDLGFX ${OS_DEFINITIONS})

#IF(NOT TARGETOS STREQUAL "WINDOWS")
#IF(NOT TARGETOS STREQUAL "PSP")
#ADD_DEFINITIONS( -DSPRITEGEN )
#ADD_DEFINITIONS( -D_GNU_SOURCE=1 -DZLIB -DDIVDLL -DMIXER -DIMAGE)

#ENDIF()
 

#-DJPGLIB )
#-DSPRITEGEN )
#-DJPGLIB )
# -DDIVDLL)
#ENDIF()

IF(APPLE)
ADD_DEFINITIONS( -ferror-limit=1 -D__WORDSIZE=64 )
SET( CMAKE_EXE_LINKER_FLAGS  "-lSDLmain -framework Cocoa" )
ELSE()
ADD_DEFINITIONS( -Wfatal-errors )
ENDIF()

IF(AMIGA)
SET( CMAKE_EXE_LINKER_FLAGS  "-noixemul" )
ENDIF()

#SET( CMAKE_EXE_LINKER_FLAGS  ${CMAKE_EXE_LINKER_FLAGS}  )
#set ( CMAKE_CXX_FLAGS "-mwindows")

#SET (TARGET ${TARGET}-CXX)
#ENDIF()


ADD_EXECUTABLE(
	${TARGET} 
	src/global.h
	${VISOR_SOURCES}
	${DIV_SOURCES} 
	${JUDAS_SOURCES}
	${ZIP_SOURCES}
	${OSDEP}
	${DLLSRC}
)
#
#ADD_EXECUTABLE(
#	${DEMOTARGET} 
#	src/global.h
#	${VISOR_SOURCES}
#	${DIV_SOURCES} 
#	${JUDAS_SOURCES}
#	${OSDEP}
#	${DLLSRC}
#)

ADD_EXECUTABLE(
	${RUNTIME} 
	src/runtime/inter.h
	${RUNTIME_SOURCES} 
	${VPE_SOURCES} 
	${JUDAS_SOURCES}
	${OSDEP}
	${DLLSRC}
	${SHARED_RUN}
	${SDLGFX_SOURCES}
)

IF(NOT WIN32) # Don't compile on Windows and MSYS2 (TOFIX)
ADD_EXECUTABLE(
	${D1RUNTIME} 
	src/div1run/inter.h
	${DIV1RUN_SOURCES} 
	${JUDAS_SOURCES}
	${OSDEP}
	${DLLSRC}
	${SHARED_RUN}
	${SDLGFX_SOURCES}
)
ENDIF()

ADD_EXECUTABLE(
	${DEBUG} 
	src/runtime/inter.h src/runtime/include.div
	${RUNTIME_SOURCES} 
	${DEBUG_SOURCES} 
	${VPE_SOURCES}
	${JUDAS_SOURCES} 
	${OSDEP}
	${DLLSRC}
	${SHARED_RUN}
	${SDLGFX_SOURCES}
)

ADD_EXECUTABLE(
	${RUNNER}
	${RUNNER_SOURCES}
)

IF ( MODE8 ) 
TARGET_COMPILE_DEFINITIONS( ${DEBUG} PRIVATE -DDEBUG -DMODE8)
TARGET_COMPILE_DEFINITIONS( ${RUNTIME} PRIVATE -DMODE8)
ELSE()
TARGET_COMPILE_DEFINITIONS( ${DEBUG} PRIVATE -DDEBUG)
TARGET_COMPILE_DEFINITIONS( ${RUNTIME} PRIVATE )
ENDIF()

#TARGET_COMPILE_DEFINITIONS( ${DEMOTARGET} PRIVATE -DSHARE )
TARGET_COMPILE_DEFINITIONS( ${RUNTIME} PRIVATE -DDIV2 )
TARGET_COMPILE_DEFINITIONS( ${DEBUG} PRIVATE -DDIV2 )
IF(NOT WIN32) # Don't compile on Windows and MSYS2 (TOFIX)
TARGET_COMPILE_DEFINITIONS( ${D1RUNTIME} PRIVATE -DDIV1 )
ENDIF()

# -Isrc/div1run")
IF(NOT WIN32) # Don't compile on Windows and MSYS2 (TOFIX)
get_target_property(COMMON_INCLUDE ${D1RUNTIME} INCLUDE_DIRECTORIES)
set_property(TARGET ${D1RUNTIME} PROPERTY INCLUDE_DIRECTORIES "${COMMON_INCLUDE}" "${CMAKE_CURRENT_SOURCE_DIR}/src/div1run" "${CMAKE_CURRENT_SOURCE_DIR}/src/shared" "${CMAKE_CURRENT_SOURCE_DIR}/src/")
ENDIF()
set_property(TARGET ${DEBUG} PROPERTY INCLUDE_DIRECTORIES "${COMMON_INCLUDE}" "${CMAKE_CURRENT_SOURCE_DIR}/src/runtime" "${CMAKE_CURRENT_SOURCE_DIR}/src/shared" "${CMAKE_CURRENT_SOURCE_DIR}/src/")
set_property(TARGET ${RUNTIME} PROPERTY INCLUDE_DIRECTORIES "${COMMON_INCLUDE}" "${CMAKE_CURRENT_SOURCE_DIR}/src/runtime" "${CMAKE_CURRENT_SOURCE_DIR}/src/shared" "${CMAKE_CURRENT_SOURCE_DIR}/src/")

#set_target_properties(${D1RUNTIME} PROPERTIES COMPILE_FLAGS "-Isrc/shared")


TARGET_LINK_LIBRARIES(${RUNNER} ${PLATFORM_LIBS} ${EXTRA_LIBS} )
TARGET_LINK_LIBRARIES(${TARGET} ${PLATFORM_LIBS} ${EXTRA_LIBS} ${GIT2_LIBRARIES})
#TARGET_LINK_LIBRARIES(${DEMOTARGET} ${EXTRA_LIBS} ${SDLGFX_LIBS} ${PLATFORM_LIBS} )
TARGET_LINK_LIBRARIES(${RUNTIME} ${PLATFORM_LIBS} ${EXTRA_LIBS} ${STATIC_LIBS})
IF(NOT WIN32) # Don't compile on Windows and MSYS2 (TOFIX)
TARGET_LINK_LIBRARIES(${D1RUNTIME} ${PLATFORM_LIBS} ${EXTRA_LIBS})
ENDIF()
TARGET_LINK_LIBRARIES(${DEBUG} ${PLATFORM_LIBS} ${EXTRA_LIBS})


SET_DIRECTORY_PROPERTIES(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES system/${TARGET} system/{$DEBUG} system/{$RUNNER} CMakeCache.txt CMakeFiles )

#ADD_CUSTOM_COMMAND(
#	TARGET ${TARGET}
#	COMMENT "-- Linking Executable ${TARGET}"
#	PRE_LINK
#)

ADD_CUSTOM_COMMAND(
	TARGET ${TARGET}
	DEPENDS ${TARGET}
	COMMAND ${CMAKE_COMMAND} -E rename ${TARGET}${BUILDEXT} system/${TARGET}${EXT}
#	COMMAND upx -9 system/${TARGET} > /dev/null
	COMMENT "-- COPYING ${TARGET} to system/${TARGET}"
	POST_BUILD
)
ADD_CUSTOM_COMMAND(
	TARGET ${RUNTIME}
	DEPENDS ${RUNTIME}
	COMMAND ${CMAKE_COMMAND} -E rename ${RUNTIME}${BUILDEXT} system/${RUNTIME}${EXT}
#	COMMAND upx -9 system/${RUNTIME} >/dev/null
	COMMENT "-- COPYING ${RUNTIME} to system/${RUNTIME}"
	POST_BUILD
)
IF(NOT WIN32) # Don't compile on Windows and MSYS2 (TOFIX)
ADD_CUSTOM_COMMAND(
	TARGET ${D1RUNTIME}
	DEPENDS ${D1RUNTIME}
	COMMAND ${CMAKE_COMMAND} -E rename ${D1RUNTIME}${BUILDEXT} system/${D1RUNTIME}${EXT}
#	COMMAND upx -9 system/${RUNTIME} >/dev/null
	COMMENT "-- COPYING ${D1RUNTIME} to system/${D1RUNTIME}"
	POST_BUILD
)
ENDIF()
ADD_CUSTOM_COMMAND(
	TARGET ${DEBUG}
	DEPENDS ${DEBUG}
	COMMAND ${CMAKE_COMMAND} -E rename ${DEBUG}${BUILDEXT} system/${DEBUG}${EXT}
#	COMMAND upx -9 system/${DEBUG} >/dev/null
	COMMENT "-- COPYING ${DEBUG} to system/${DEBUG}"
	POST_BUILD
)


